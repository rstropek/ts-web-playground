title: "TicTacToe (Arrays)"
descriptionMd: |
  # TicTacToe

  In this exercise, you implement a simple TicTacToe game. Players X and O take turns to mark the cells in a 3x3 grid. The player who succeeds in placing three of their marks in a horizontal, vertical, or diagonal row wins the game.

  ![TicTacToe](https://github.com/rstropek/ts-web-playground/blob/main/exercises/0040-Switch/tictactoe.gif?raw=true)

  Implement this variant of the TicTacToe game using arrays and loops.

  ## Step 1: Draw the grid

  Draw the grid lines. Responsive design is not required. You can use absolute coordinates. However, use constants where appropriate.

  ## Step 2: Variables to store the state of each cell

  Use an array to store the state (_X_, _O_, or empty) of each cell. Write the code that draws the symbols in the corresponding cells. Test your code by manually setting the state of some cells.

  ## Step 3: Current player

  Add a variable to store the current player. Initially, it should be _X_. Write "Player X's turn" or "Player O's turn" on the screen as shown in the screen above.

  ## Step 4: Handle mouse clicks

  Add code to handle mouse clicks. If the user clicks on an empty cell, the cell should be marked with the current player's symbol. Also, switch to the other player.

  ## Step 5: Game result

  Add code to check if the game has ended. The game ends if one player has three of their marks in a row, column, or diagonal. The game also ends if all cells have been filled without a player winning. In this case, the result should be a tie. Display the result message on the screen as shown in the screen above.

  ## Step 6: Reset the game

  If the game has ended and the user clicks anywhere on the canvas, the game should be reset to the initial state so that a new game starts.

sampleSolution: "https://raw.githubusercontent.com/rstropek/ts-web-playground/refs/heads/main/exercises/0060-Arrays/tic-tac-toe-array.ts"
files:
  "index.ts":
    content: |
      // ===== CONSTANTS =====
      // These values never change during the game, so we use 'const'
      const GRID_SIZE    = 300;             // Total size of the game board (300x300 pixels)
      const CELL_SIZE    = GRID_SIZE / 3;   // Each cell is 1/3 of the grid (100x100 pixels)
      const LINE_WEIGHT  = 3;               // How thick the grid lines are (3 pixels)

      // ===== GAME STATE VARIABLES =====
      // Todo: Add variables to track the game state

      function setup() {
        // Create a canvas (drawing area) that's 300x350 pixels
        // The extra 50 pixels at the bottom are for showing game status
        createCanvas(GRID_SIZE, GRID_SIZE + 50);
        
        // Todo: Complete the game setup
      }

      function draw() {
        background("white");    // Clear the screen with white background

        // Todo: Complete the drawing logic
      }

      function mouseClicked() {
        // Todo: Handle mouse clicks
      }
    isEditable: true
  "index.html":
    content: |
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <script src="{{p5Source}}"></script>
          {{topScripts}}
          </head>
        <body>
          {{bodyScripts}}
        </body>
      </html>
    isEditable: false
