title: "Parallax (Step 3)"
descriptionMd: |
  # Parallax (Step 3)

  Now it is finally time for the _Parallax Effect_:

  ![Moving background](https://raw.githubusercontent.com/rstropek/ts-web-playground/refs/heads/main/exercises/0065-Array-Parallax/parallax-3.gif)

  In the previous example, we translated all layers of the background image by the same amount. This already looked nice, but parallax scrolling will make it even better. In parallax scrolling, the layers of the background image move at different speeds. The layer that is farthest away from the viewer moves slowest. The layer that is closest to the viewer moves fastest.

  The starter code for this exercise is the sample solution for the _Parallax (Step 2)_ exercise. If you have your own solution for the previous exercise, you can use it as your personal starting point for this exercise. Think about how you can modify your code to implement the parallax effect.

  Granted, coming up with a solution for parallax scrolling is not easy if you do it for the first time. If you struggle, take a look at the sample solution. It contains detailed documentation. Make sure that you understand how the code implements the parallax effect. Then, go back to your code and try to implement the parallax effect on your own.  

sampleSolution: "https://raw.githubusercontent.com/rstropek/ts-web-playground/refs/heads/main/exercises/0065-Array-Parallax/parallax-3.ts"
files:
  "index.ts":
    content: |
      const THEME_IX = 2;

      const images: p5.Image[] = [];

      let backgroundScale = 1;
      let scaledImageWidth = 0;
      let scaledImageHeight = 0;

      // Number of pixels to scroll when the user presses the cursor keys
      const SCROLL_SPEED = 5;

      // Current scroll position in x direction. A positive value means that the background
      // images are moved to the right. A negative value means that the background images are moved to the left.
      let scrollPosition = 0;

      function preload() {
          // Same code as in the previous example

          const theme = themes[THEME_IX];
          for (let i = 0; i < theme.length; i++) {
              const imageName = theme[i];
              const image = loadImage(`${BASE_URL}/${themeNames[THEME_IX]}/${imageName}`);
              images.push(image);
          }
      }

      function setup() {
          // Same code as in the previous example

          createCanvas(500, 500);

          backgroundScale = width / images[0].width;
          scaledImageWidth = images[0].width * backgroundScale;
          scaledImageHeight = images[0].height * backgroundScale;
      }

      function draw() {
          background("black");

          // Check if user presses the cursor keys.
          if (keyIsDown(39) && scrollPosition > -width) {
              // Cursor right
              scrollPosition = scrollPosition - SCROLL_SPEED;
          } else if (keyIsDown(37) && scrollPosition < width) {
              // Cursor left
              scrollPosition += SCROLL_SPEED;
          }

          // Uncomment the following lines to zoom out. This will make it easier for you
          // to see how the background images move out of the visible area when you press the cursor keys.
          scale(0.5);
          translate(width / 2, height / 2);

          push();

          // Translate the background images according to the current scroll position
          translate(scrollPosition, 0);

          // From here on, the code is the same as in the previous example
          translate(0, (height - scaledImageHeight) / 2);
          for (let i = 0; i < images.length; i++) {
              const img = images[i];

              // Draw background image to the left...
              image(img, -scaledImageWidth, 0, scaledImageWidth, scaledImageHeight);
              
              image(img, 0, 0, scaledImageWidth, scaledImageHeight);

              // ... and one background image to the right.
              image(img, scaledImageWidth, 0, scaledImageWidth, scaledImageHeight);
          }
          pop();

          // Uncomment the following lines to draw a rectangle around the canvas. This will help you to see
          // how the background images move out of the visible area when you press the cursor keys. Use
          // these lines of code together with the commented _scale()_ and _translate()_ functions above.
          push();
          noFill();
          stroke("red");
          rect(0, 0, width, height);
          pop();

          resetMatrix();
          push();
          fill("white");
          noStroke();
          textSize(10);
          textAlign(LEFT, TOP);
          text(`Scroll position (x): ${scrollPosition}`, 10, 10);
          pop();
      }

    isEditable: true
  "images.ts":
    content: |
      // URL where the images are stored. You have to append the theme name (see also _themeNames_ below)
      // and the image name to get the full URL. Example: To get the URL of the first image of the 
      // _cave_ theme, use `${BASE_URL}/cave/1_wall.png`.
      const BASE_URL = "https://cddataexchange.blob.core.windows.net/images/parallax";

      // Define the images for the different themes. The first image must be drawn first because it is the farthest away.
      // The last image must be drawn last because it is the closest to the viewer.
      const cave = [
          "1_wall.png",
          "2_prop01.png",
          "3_prop02.png",
          "4_stones.png",
          "5_crystals.png",
          "6_ground.png"
      ];
      const mountains = [
          "1_sky.png",
          "2_mountains.png",
          "3_clouds.png",
          "4_bg-ground01.png",
          "5_bg-ground02.png",
          "6_ground.png"
      ];
      const winter = [
          "1_sky.png",
          "2_stars.png",
          "3_clouds01.png",
          "4_clouds02.png",
          "5_mountains.png",
          "6_ground01.png",
          "7_ground02.png",
          "8_ground.png"
      ];
      const dessert = [
          "1_sky.png",
          "2_clouds.png",
          "3_pyramid.png",
          "4_bg-ground01.png",
          "5_bg-ground02.png",
          "6_bg-ground03.png",
          "7_ground.png"
      ];

      // _themes_ is an array of arrays. Each sub-array contains the image names for one theme.
      // If you want to get the theme _cave_, use _themes[0]_, for _winter_ use _themes[2]_, and so on.
      const themes = [
          cave,
          mountains,
          winter,
          dessert
      ];

      // The names of the themes. The order must match the order of the themes in the _themes_ array.
      const themeNames = [
          "cave",
          "mountains",
          "winter",
          "dessert"
      ]
    isEditable: false

  "index.html":
    content: |
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <script src="{{p5Source}}"></script>
          {{topScripts}}
        </head>
        <body>
          {{bodyScripts}}
        </body>
      </html>
    isEditable: false
