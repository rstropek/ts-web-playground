title: "Parallax (Step 4)"
descriptionMd: |
  # Parallax (Step 4)

  Let's add a sprite that moves through the scene:

  ![Added sprite](https://raw.githubusercontent.com/rstropek/ts-web-playground/refs/heads/main/exercises/0065-Array-Parallax/parallax-4.png)

  We have a worm sprite prepared. It consists of 40 images so that we can animate the worm. The URLs are _https://cddataexchange.blob.core.windows.net/images/parallax/worm/Moving_00.png_ to _https://cddataexchange.blob.core.windows.net/images/parallax/worm/Moving_39.png_.

  The starter code for this exercise is the sample solution for the _Parallax (Step 3)_ exercise. If you have your own solution for the previous exercise, you can use it as your personal starting point for this exercise.

  ## Task 1: Add the Worm Sprite

  Modify your code as follows:

  1. Create an array of images for the worm sprites (similar to the _images_ array for the background images).
  2. Load **all** the worm images (_Moving_00.png_ to _Moving_39.png_) in the _preload()_ function. Add the images to the array you created in step 1.
  3. Add a variable to store the current frame of the worm animation. Initialize it with 0.
  4. In the _draw()_ function, draw the current frame of the worm animation. It must be horizontally centered and vertically placed on the "ground" of our background image.
  5. Whenever the user presses a cursor key, switch to the next frame of the worm animation by increasing the variable you created in step 3. Make sure to wrap around when you reach the last frame (modulos operation (_%_) or _if_ statement).

  If you did everything correctly, you should see the worm moving through the scene when you press the cursor keys:

  ![Moving sprite](https://raw.githubusercontent.com/rstropek/ts-web-playground/refs/heads/main/exercises/0065-Array-Parallax/parallax-4.gif)

  ## Task 2: Advanced Movement

  Change your code so that the worm can move towards the very end of the scene (i.e. does not always stay centered). Take a close look at the following animation to see what we want to achieve:

  ![Moving sprite](https://raw.githubusercontent.com/rstropek/ts-web-playground/refs/heads/main/exercises/0065-Array-Parallax/parallax-4-advanced.gif)

  * The worm starts centered.
  * When the scrolling has reached the limit, the worm's position changes so that it moves towards the edge of the scene.
  * When the worm moves back, the background does **not** scroll immediately. First, the worm moves to the center of the scene, and then the background scrolls.

  **Tip:** Draw the current worm position in the upper left corner. This will help you to understand the worm's movement.
  
sampleSolution: "https://raw.githubusercontent.com/rstropek/ts-web-playground/refs/heads/main/exercises/0065-Array-Parallax/parallax-4.ts"
files:
  "index.ts":
    content: |
      const THEME_IX = 3;

      const images: p5.Image[] = [];

      let backgroundScale = 1;
      let scaledImageWidth = 0;
      let scaledImageHeight = 0;

      const SCROLL_SPEED = 5;
      let scrollPosition = 0;

      function preload() {
          const theme = themes[THEME_IX];
          for (let i = 0; i < theme.length; i++) {
              const imageName = theme[i];
              const image = loadImage(`${BASE_URL}/${themeNames[THEME_IX]}/${imageName}`);
              images.push(image);
          }
      }

      function setup() {
          createCanvas(500, 500);

          backgroundScale = width / images[0].width;
          scaledImageWidth = images[0].width * backgroundScale;
          scaledImageHeight = images[0].height * backgroundScale;
      }

      function draw() {
          background("black");

          if (keyIsDown(39) && scrollPosition > -width) {
              scrollPosition = scrollPosition - SCROLL_SPEED;
          } else if (keyIsDown(37) && scrollPosition < width) {
              scrollPosition += SCROLL_SPEED;
          }

          // Uncomment the following lines to zoom out. This will make it easier for you
          // to see how the background images move out of the visible area when you press the cursor keys.
          scale(0.5);
          translate(width / 2, height / 2);

          push();

          translate(0, (height - scaledImageHeight) / 2);
          const step = scrollPosition / images.length;

          for (let i = 0; i < images.length; i++) {
              translate(step, 0);

              const img = images[i];

              image(img, -scaledImageWidth, 0, scaledImageWidth, scaledImageHeight);
              image(img, 0, 0, scaledImageWidth, scaledImageHeight);
              image(img, scaledImageWidth, 0, scaledImageWidth, scaledImageHeight);
          }
          pop();

          // Uncomment the following lines to draw a rectangle around the canvas. This will help you to see
          // how the background images move out of the visible area when you press the cursor keys. Use
          // these lines of code together with the commented _scale()_ and _translate()_ functions above.
          push();
          noFill();
          stroke("red");
          rect(0, 0, width, height);
          pop();

          resetMatrix();
          push();
          fill("white");
          noStroke();
          textSize(10);
          textAlign(LEFT, TOP);
          text(`Scroll position (x): ${scrollPosition}`, 10, 10);
          pop();
      }

    isEditable: true
  "images.ts":
    content: |
      // URL where the images are stored. You have to append the theme name (see also _themeNames_ below)
      // and the image name to get the full URL. Example: To get the URL of the first image of the 
      // _cave_ theme, use `${BASE_URL}/cave/1_wall.png`.
      const BASE_URL = "https://cddataexchange.blob.core.windows.net/images/parallax";

      // Define the images for the different themes. The first image must be drawn first because it is the farthest away.
      // The last image must be drawn last because it is the closest to the viewer.
      const cave = [
          "1_wall.png",
          "2_prop01.png",
          "3_prop02.png",
          "4_stones.png",
          "5_crystals.png",
          "6_ground.png"
      ];
      const mountains = [
          "1_sky.png",
          "2_mountains.png",
          "3_clouds.png",
          "4_bg-ground01.png",
          "5_bg-ground02.png",
          "6_ground.png"
      ];
      const winter = [
          "1_sky.png",
          "2_stars.png",
          "3_clouds01.png",
          "4_clouds02.png",
          "5_mountains.png",
          "6_ground01.png",
          "7_ground02.png",
          "8_ground.png"
      ];
      const dessert = [
          "1_sky.png",
          "2_clouds.png",
          "3_pyramid.png",
          "4_bg-ground01.png",
          "5_bg-ground02.png",
          "6_bg-ground03.png",
          "7_ground.png"
      ];

      // _themes_ is an array of arrays. Each sub-array contains the image names for one theme.
      // If you want to get the theme _cave_, use _themes[0]_, for _winter_ use _themes[2]_, and so on.
      const themes = [
          cave,
          mountains,
          winter,
          dessert
      ];

      // The names of the themes. The order must match the order of the themes in the _themes_ array.
      const themeNames = [
          "cave",
          "mountains",
          "winter",
          "dessert"
      ]
    isEditable: false

  "index.html":
    content: |
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <script src="{{p5Source}}"></script>
          {{topScripts}}
        </head>
        <body>
          {{bodyScripts}}
        </body>
      </html>
    isEditable: false
