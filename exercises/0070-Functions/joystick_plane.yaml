title: "Joystick Plane"
descriptionMd: |
  # Joystick Plane

  In this exercise, we control the movements of a fighter jet using a simulated joystick. Our "joystick" is a black dot in a red circle. We can drag it with the mouse in all directions. The further the dot is away from the center of the red circle, the faster the jet moves into the given directions.

  ![Joystick plane](https://raw.githubusercontent.com/rstropek/ts-web-playground/refs/heads/main/exercises/0070-Functions/joystick_plane.png)

  ## Step 1: Make yourself familiar with the code

  The starter code already draws the jet. Make yourself familiar with the code.

  ## Step 2: Draw the "Joystick"

  Add code to draw the joystick. The red circle has a radius of 50 pixels. The black dot has a radius of 10 pixels.

  ## Step 3: Make the "Joystick" dragable

  Implement the _mousePressed_, _mouseDragged_, and _mouseReleased_ functions to make the joystick dragable:

  * If the user clicks, check if the click is inside the black circle. You must use the Pythagorean theorem to calculate the distance between the click and the center of the black circle.
  * If the user has clicked inside the black circle (=joystick) and _mouseDragged_ is called (i.e. mouse is moved while button is pressed), move the black circle to the mouse position.
  * If the user releases the mouse, the black circle should stay at the last position until the user clicks on the joystick again.

  Note that in this step, it is ok if the "joystick" moves out of the red circle.

  ## Step 4: Control the Jet

  Change the _draw_ function to move the jet according to the position of the joystick. **The further the joystick is away from the center of the red circle, the faster the jet should move.**

  Tip: Delta X and delta Y divided by 5 is a good "speed factor". However, you can tune the speed factor to your liking.

  ## Step 5: Enhanced Jet Control

  Make sure that the jet can never fly outside of the visible area.

  Show the current position of the jet relative to the center of the canvas and it's current speed in the left lower corner of the canvas.

  ## Step 6 (Advanced): Limit the Joystick to the Red Circle

  Implement code to limit the movement of the joystick to the red circle. If the user tries to move the joystick outside the red circle, the joystick should stay at the border of the red circle but should still follow the direction of the mouse.

  Tip: Use Pythagorean theorem to calculate the distance between the center of the red circle and the mouse position. If the distance is greater than the radius of the red circle, scale down the distance from the center of the red circle to the mouse position to the radius of the red circle.

sampleSolution: "https://raw.githubusercontent.com/rstropek/ts-web-playground/refs/heads/main/exercises/0070-Functions/joystick_plane.ts"
files:
  "index.ts":
    content: |
      let fighter: p5.Image;

      const fighterImageWidth = 475;
      const fighterImageHeight = 724;
      const fighterDisplayHeight = 200;
      const fighterDisplayWidth = fighterDisplayHeight * (fighterImageWidth / fighterImageHeight);
      let fighterPositionX = 0;
      let fighterPositionY = 0;

      function preload() {
        fighter = loadImage("https://cddataexchange.blob.core.windows.net/images/Spaceship.png");
      }

      function setup() {
        createCanvas(500, 500);
      }

      function draw() {
        background("lightblue");

        push();
        imageMode(CENTER);
        translate(width / 2 + fighterPositionX, height / 2 + fighterPositionY);
        image(fighter, 0, 0, fighterDisplayWidth, fighterDisplayHeight);
        pop();
      }

      function mousePressed() {
      }

      function mouseDragged() {
      }

      function mouseReleased() {
      }
    isEditable: true

  "index.html":
    content: |
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <script src="{{p5Source}}"></script>
          {{topScripts}}
        </head>
        <body>
          {{bodyScripts}}
        </body>
      </html>
    isEditable: false
