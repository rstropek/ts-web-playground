title: "RPS Part 2"
descriptionMd: |
  # Rock-Paper-Scissors Part 2

  In this exercise, we build a simple _Rock-Paper-Scissors_ game.

  ![Rock-Paper-Scissors](https://github.com/rstropek/ts-web-playground/blob/main/exercises/0030-Conditions/rps-animation.gif?raw=true)

  In the second part, we add the computer's random choise and find out the winner.

  The UI layout is the same as in the first part:

  ![Rock-Paper-Scissors UI design](https://github.com/rstropek/ts-web-playground/blob/main/exercises/0030-Conditions/rps-layout.png?raw=true)

  ## Step 1: Let the user choose an option

  Add a global variable to store the user's choice. Add code to _mouseClicked_ to recognize the user's choice. Disable the hover effect once the user has made a choice.

  Note: Once the user has made a choice, it cannot be changed. Therefore, ignore _mouseClicked_ events after the user has made a choice.

  ## Step 2: Random computer choice
  
  Use the random number generator to choose an option for the computer. Display the computer's choice as shown in the layout above.

  ## Step 3: Determine the winner

  Use _if_ statements to determine the winner based on the choices of the user and the computer. Display the result as shown in the layout above.

files:
  "index.ts":
    content: |
      // We declare constants to avoid repeating "magic numbers". 
      // These numbers are used for positioning text and icons on the canvas.
      // Note that we use all-caps for constants that represent 
      // configuration values to make them easy to recognize.
      const TEXT_LEFT = 30;
      const STONE_LEFT = 50;
      const PAPER_LEFT = 175;
      const SCISSORS_LEFT = 300;
      const ICON_WIDTH = 100;
      const ICON_TOP = 75;
      const ICON_HEIGHT = 100;

      function setup() {
          createCanvas(500, 490);
          background("black");

          fill("yellow");
          textSize(30);
          text("Human:", TEXT_LEFT, 50);

          // Display the icons for "stone", "paper", and "scissors".
          textSize(75);
          const HUMAN_SYMBOLS_TOP = 150;
          text("ü™®", STONE_LEFT, HUMAN_SYMBOLS_TOP);
          text("üìÉ", PAPER_LEFT, HUMAN_SYMBOLS_TOP);
          text("‚úÇÔ∏è", SCISSORS_LEFT, HUMAN_SYMBOLS_TOP);
      }

      function mouseMoved() {
          // This function highlights the icon currently being hovered over by the mouse.
          // <<< Add code here to disable the hover effect once the user has made a choice
          noFill();
          strokeWeight(3);

          // In the following lines of code, we repeatedly check if the mouse
          // is vertically in the relevant area. Therefore, we calculate the boolean
          // value once and use the variable later multiple times.
          const isInVertical = mouseY >= ICON_TOP && mouseY < ICON_TOP + ICON_HEIGHT;

          // Check if the mouse is over the "stone" icon.
          if (isInVertical && mouseX >= STONE_LEFT && mouseX < STONE_LEFT + ICON_WIDTH) {
              stroke("yellow"); // Highlight with yellow.
          } else {
              stroke("black"); // Remove highlight by drawing in black.
          }
          // Draw a rectangle around the "stone" icon.
          rect(STONE_LEFT, ICON_TOP, ICON_WIDTH, ICON_HEIGHT);

          // Same for paper
          if (isInVertical && mouseX >= PAPER_LEFT && mouseX < PAPER_LEFT + ICON_WIDTH) {
              stroke("yellow");
          } else {
              stroke("black");
          }
          rect(PAPER_LEFT, ICON_TOP, ICON_WIDTH, ICON_HEIGHT);

          // Same for scissors
          if (isInVertical && mouseX >= SCISSORS_LEFT && mouseX < SCISSORS_LEFT + ICON_WIDTH) {
              stroke("yellow");
          } else {
              stroke("black");
          }
          rect(SCISSORS_LEFT, ICON_TOP, ICON_WIDTH, ICON_HEIGHT);
      }

      function mouseClicked() {
        // <<< Add code here to let the user choose an option and find out the winner
      }

    isEditable: true
  "index.html":
    content: |
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <script src="{{p5Source}}"></script>
          {{topScripts}}
          </head>
        <body>
          {{bodyScripts}}
        </body>
      </html>
    isEditable: false
